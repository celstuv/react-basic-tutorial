[{"C:\\wamp64\\www\\tutorial\\src\\index.js":"1","C:\\wamp64\\www\\tutorial\\src\\books.js":"2","C:\\wamp64\\www\\tutorial\\src\\Book.js":"3"},{"size":439,"mtime":1611309702127,"results":"4","hashOfConfig":"5"},{"size":589,"mtime":1611310485261,"results":"6","hashOfConfig":"5"},{"size":758,"mtime":1611311189786,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"10"},"1c971zz",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"C:\\wamp64\\www\\tutorial\\src\\index.js",["16"],"import React from 'react';\nimport ReactDom from 'react-dom';\nimport Book from './Book';\n\n//CSS\nimport './index.css';\n\n//data\nimport { data } from './books';\n\n\nfunction BookList() {\n  return (\n    <section className=\"booklist\">\n      {data. map((book, index) => {\n        return (\n          <Book key={book.id} {...book}></Book>\n        );\n      })}\n    </section>\n  );\n};\n\n\n\nReactDom.render(<BookList />, document.getElementById('root'));\n","C:\\wamp64\\www\\tutorial\\src\\books.js",[],"C:\\wamp64\\www\\tutorial\\src\\Book.js",["17","18","19"],"import React from 'react';\r\n\r\n\r\nconst Book = ({ img, title, author }) => {\r\n\r\n  // attribute, eventHandler\r\n  //onClick, onMouseOver\r\n  const clickHandler = (e) => {\r\n    alert('Hello World');\r\n    console.log(e.target);\r\n  };\r\n\r\n  const complexeExample = (author) => {\r\n    console.log(author);\r\n  }\r\n\r\n  return (\r\n    <article className=\"book\" onMouseOver={() => {\r\n        console.log(title)\r\n      }}>\r\n      <img src={img} alt=\"image\" />\r\n      <h1 onClick={() => console.log(title)}>{title}</h1>\r\n      <h4>{author}</h4>\r\n{ /*     <button type=\"button\" onClick={clickHandler}>Exemple</button><br />\r\n      <button type=\"button\" onClick={() => complexeExample(author)}>more complexe example</button>*/ } \r\n   </article>);\r\n};\r\n\r\n\r\nexport default Book;\r\n",{"ruleId":"20","severity":1,"message":"21","line":15,"column":8,"nodeType":"22","messageId":"23","endLine":15,"endColumn":17,"fix":"24"},{"ruleId":"25","severity":1,"message":"26","line":8,"column":9,"nodeType":"27","messageId":"28","endLine":8,"endColumn":21},{"ruleId":"25","severity":1,"message":"29","line":13,"column":9,"nodeType":"27","messageId":"28","endLine":13,"endColumn":24},{"ruleId":"30","severity":1,"message":"31","line":21,"column":7,"nodeType":"32","endLine":21,"endColumn":36},"no-whitespace-before-property","Unexpected whitespace before property map.","MemberExpression","unexpectedWhitespace",{"range":"33","text":"34"},"no-unused-vars","'clickHandler' is assigned a value but never used.","Identifier","unusedVar","'complexeExample' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",[238,240],"."]